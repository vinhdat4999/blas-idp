name: build and release

on:
  push:
    branches: [ main, develop ]

jobs:
  #  build-and-release:
  #    runs-on: ubuntu-latest
  #
  #    steps:
  #      - uses: actions/checkout@v4
  #
  #      - name: Set up JDK 21
  #        uses: actions/setup-java@v4
  #        with:
  #          java-version: '21'
  #          distribution: 'temurin'
  #          server-id: github
  #
  #      - name: Install xmllint tool
  #        shell: bash
  #        continue-on-error: true
  #        run: |
  #          sudo apt-get clean
  #          sudo apt-get install -f
  #          sudo dpkg --configure -a
  #          sudo apt-get update
  #          sudo apt-get install libxml2-utils
  #
  #      - name: Extract release version from pom.xml
  #        id: extractVersion
  #        run: |
  #          serviceVersion=$(xmllint --xpath '/*[local-name()="project"]/*[local-name()="version"]/text()' pom.xml | sed "s/-SNAPSHOT//")
  #          echo "serviceVersion=$serviceVersion"
  #          echo "serviceVersion=$serviceVersion" >> $GITHUB_OUTPUT
  #
  #      - name: Cache Maven dependencies
  #        uses: actions/cache@v2
  #        with:
  #          path: ~/.m2/repository
  #          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
  #          restore-keys: ${{ runner.os }}-maven-
  #
  #      - name: Build with Maven
  #        run: mvn -B package --file pom.xml
  #        env:
  #          GITHUB_ACTOR: ${{ env.GITHUB_ACTOR }}
  #          GITHUB_TOKEN: ${{ secrets.PACKAGE }}
  #
  #      - name: Set up Docker Buildx
  #        uses: docker/setup-buildx-action@v2
  #
  #      - name: Login to Docker Hub
  #        uses: docker/login-action@v1
  #        with:
  #          username: ${{ secrets.DOCKERHUB_USERNAME }}
  #          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
  #
  #      - name: Build and push Docker image
  #        uses: docker/build-push-action@v2
  #        with:
  #          context: .
  #          file: Dockerfile
  #          push: true
  #          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.extractName.outputs.serviceName }}:${{ steps.extractVersion.outputs.serviceVersion }}
  #
  #      - name: Logout from Docker Hub
  #        run: docker logout

  publish-helm-chart:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install artifact-hub-push
        run: |
          curl -L https://github.com/artifacthub/hub/releases/download/v1.17.0/ah_1.17.0_linux_amd64.tar.gz | tar zx
          sudo mv artifact-hub-push /usr/local/bin/
        shell: bash

      - name: Push to Artifact Hub
        run: |
          artifact-hub-push --repository blas-idp --chart ./blas-idp-*.tgz --api-key ${{ secrets.ARTIFACT_HUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#  deploy:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Setup Helm
#        uses: azure/setup-helm@v1
#
#      - name: Login to Azure
#        uses: azure/login@v1
#        with:
#          creds: ${{ secrets.AZURE_CREDENTIALS }}
#
#      - name: Set AKS context
#        uses: azure/aks-set-context@v1
#        with:
#          creds: ${{ secrets.AZURE_CREDENTIALS }}
#          cluster-name: blas-aks
#          resource-group: <resource-group-name>
#
#      - name: Deploy Helm chart to AKS
#        run: helm upgrade --install my-release ./path/to/your/helm/chart
