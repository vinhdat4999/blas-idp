name: build and release

on:
  push:
    branches: [ main, develop ]

jobs:
#  build-and-release:
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Set up JDK 21
#        uses: actions/setup-java@v4
#        with:
#          java-version: '21'
#          distribution: 'temurin'
#          server-id: github
#
#      - name: Install xmllint tool
#        shell: bash
#        continue-on-error: true
#        run: |
#          sudo apt-get clean
#          sudo apt-get install -f
#          sudo dpkg --configure -a
#          sudo apt-get update
#          sudo apt-get install libxml2-utils
#
#      - name: Extract release version from pom.xml
#        id: extractVersion
#        run: |
#          serviceVersion=$(xmllint --xpath '/*[local-name()="project"]/*[local-name()="version"]/text()' pom.xml | sed "s/-SNAPSHOT//")
#          echo "serviceVersion=$serviceVersion"
#          echo "serviceVersion=$serviceVersion" >> $GITHUB_OUTPUT
#
#      - name: Cache Maven dependencies
#        uses: actions/cache@v2
#        with:
#          path: ~/.m2/repository
#          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#          restore-keys: ${{ runner.os }}-maven-
#
#      - name: Build with Maven
#        run: mvn -B package --file pom.xml
#        env:
#          GITHUB_ACTOR: ${{ env.GITHUB_ACTOR }}
#          GITHUB_TOKEN: ${{ secrets.PACKAGE }}
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
#
#      - name: Build and push Docker image
#        uses: docker/build-push-action@v2
#        with:
#          context: .
#          file: Dockerfile
#          push: true
#          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.extractName.outputs.serviceName }}:${{ steps.extractVersion.outputs.serviceVersion }}
#
#      - name: Logout from Docker Hub
#        run: docker logout

  build-helm:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Install Artifact Hub CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/artifacthub/hub/main/install/install.sh | bash
          export PATH=$PATH:/home/runner/.artifact-hub/bin

      - name: Package Helm chart
        run: helm package ./charts/blas-idp -d .

      - name: Publish Helm chart to Artifact Hub
        run: |
          helm artifact push ./blas-idp-*.tgz
        env:
          HELM_EXPERIMENTAL_OCI: 1
          ARTIFACT_HUB_TOKEN: ${{ secrets.ARTIFACT_HUB_TOKEN }}

#  deploy:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Setup Helm
#        uses: azure/setup-helm@v1
#
#      - name: Login to Azure
#        uses: azure/login@v1
#        with:
#          creds: ${{ secrets.AZURE_CREDENTIALS }}
#
#      - name: Set AKS context
#        uses: azure/aks-set-context@v1
#        with:
#          creds: ${{ secrets.AZURE_CREDENTIALS }}
#          cluster-name: blas-aks
#          resource-group: <resource-group-name>
#
#      - name: Deploy Helm chart to AKS
#        run: helm upgrade --install my-release ./path/to/your/helm/chart
